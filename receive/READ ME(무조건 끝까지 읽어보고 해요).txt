모터 드라이버 코드 한번 확인하고 실행해보세요.
if문으로 키고 끄는거 둘다 넣어야해요!!!
if(tmp_buf == 0), if(tmp_buf == 1) 둘다요!
//세팅

이름 / 메이저 넘버 / gpio 넘버

키1 	211  	gpio2
키2 	212  	gpio3
키3 	213  	gpio4
키4 	214 	 gpio5

도트	 215  gpio10-17 input gpio 20-27 output

센서1	255	gpio18
센서2	217	gpio7
센서3	218	gpio8
모터	219	gpio9

1번 - 모터동작
2번 - 전체금액
3번 - 각 동전개수
4번 - 전체 동전 개수

키 동작 순서(왼쪽부터 1,2,3,4번키)
처음 센서 ./test_mac을 채팅창에 입력하면, 1번 키를 누를때까지 동작을 기다린다.
1번 키는 동전을 넣기 전 모터를 키는 것과 센서를 키는 것에 해당된다.
1번키를 누르고 동전을 넣어서 각 동전을 센서에 인식시키고 모터를 계속 켜놓는다.
모든 동전이 다 떨어지고 센서작동과 모터작동을 끄려면 2번키로 넘어가야한다.
2번키를 누르면 센서 감지 및 모터의 동작이 끝나고 종료되며, 각 키가 입력을 기다린다.
각 키는 도트매트릭스 동작을 대기하며, 1번 기계종료 2번 전체금액 출력 3번 각 동전 개수 4번 전체동전개수출력이다.
다른동작으로 넘어가기 위해, 키를 조금 길게 눌러야할 수도 있다.

// 테스트 코드 설명
위에꺼 읽어보면 키는 대충 이해되실거같고
117번에 while (mac_state == 1)해가지고 쓰레드 생성하는 곳에 메인문에서 모터도 동작 같이 킨다음.
그 while문이 끝나는게 동작 종료일때니까 이때 122 123번줄에 모터끄는 명령문 넣었구요.

166번 줄부터 1번키 내용
236번 줄부터 2번키 내용
438번 줄부터 3번키 내용

일단 각 키에서 배열은
arro (o는 1번키는 a 2번키는 b 3번키는 c) 
예를들어 arra - 1번키에서 배열입니다.
그리고 value_arro가 있는데
arro는 전체 숫자의 자릿수를 저장하는거고
value_arro는 전체 출력할 문장을 저장하는거예요 (둘다 1차원 배열)

1번키에서 내용을 예시로 든다면 --------------- 출력 전체 설명 예시 읽어보세요
예를 들어 숫자가 1250원을 출력한다면.
T : 1 2 5 0 W가 출력해야하니까
T ,: ,W 같은경우는 입력을 그냥 해주는거고
size가 자리수 (여기서는 4자리이니까 size = 4)
arra[size] = {1, 2, 5, 0} 으로 생성 및 입력되요 (이것은 동적할당으로...)
value_arra[8*(size+3)] = 
{ T(57번 줄에 있는 8개의 배열 전체가 들어갑니다.)
 : (59번 줄에 있는 8개의 배열 전체가 들어갑니다.)
 1 (46번 줄에 있는 8개의 배열 전체가 들어갑니다.)
.... 해가지고 T : 1 2 5 0 W 의 각각의 출력하는 8개의 배열값을 전부다 일차원 배열로 넣습니다.
그러면 총 배열의 개수가 여기서는 8*7 = 56입니다.
이제 출력인데 출력할때 write를 value_arra의 주소값을 전해주니까 
이 주소값에서 8개를 출력하는데 주소값을 배열의 첫번째, 두번째, 세번째 천천히 처음부터 주게되면
value_arra[0]~value_arra[7] 출력 후 ( T 전부 출력 )
value_arra[1]~value_arra[8] 출력 후 ( T의 7줄 + : 의 1줄 출력)
value_arra[2]~value_arra[9] 출력 후 ( T의 6줄 + : 의 2줄 출력)
value_arra[3]~value_arra[10] 출력 후 ( T의 5줄 + : 의 3줄 출력)
value_arra[4]~value_arra[11] 출력 후 ( T의 4줄 + : 의 4줄 출력)
value_arra[5]~value_arra[12] 출력 후 ( T의 3줄 + : 의 5줄 출력)...
이렇게 천천히 슬라이드를 하게되면서 출력을 합니다.
그러면 출력을 하게 되고, 222번라인에 time을 쓰는데 이거는 출력이 너무 빠르니까 잔상남기려고 시간을 끄는거입니다. 278번줄까지

그리고 219번 줄에 보면 key2_ret == 0 인데 이거는 키 값이 안들어오면 0 키값이 들어오면 1으로 알고있어서
다른 키값이 들어오기 전까지 계속 출력하는거고 키 값들어오면 while문을 실행안하고 종료를하니까
free(arra), freaa(value_arra) 하면서 동적할당 없애주는 명령어 넣었습니다.

------------- 이렇게되면 전체 금액 출력문이 종료되고 1번키나 2번키나 3번키가 입력됬다는거니까 if문장으로가서 실행합니다.
다른 2번키 3번키도 마찬가지로 되며, 2번키는 EA500, EA100, EA50을 따로따로 개수를 세서 value_arr에 넣어야하니까
do{
	len = (len / 10);
	size ++;	
	} while (len > 0);
			
	char	*arrb1 = (char*)malloc(sizeof(char)*(size));

	do{
	a = number % 10;
	b = number / 10;
	number = b;
	arrb1[n] = a;
	n++;
} while (b!=0);

이 문장에서 arrb1, arrb2, arrb3라고 해서 각각을 세번해가지고 
value_arrb 문장을
C : 5 0 0 (개수)(공백) 1 0 0 : (개수)(공백) 5 0 : (개 수)(공백)
공백은 61번줄에 있습니다
그래서 각각 500원 100원 50원의 개수를 따로 세고 value_arrb를 순차적으로 만들어줘야하니까, 
5 0 0 넣어주고 개수 넣어주고 공백 넣어주고 n 값 line 값 초기화 및 size 다시재기
1 0 0 넣어주고 개수 넣어주고 공백 넣어주고 n 값 line 값 초기화 및 size 다시재기 
5 0 넣어주고 개수 넣어주고 공백 넣어주고 n 값 line 값 초기화 및 size 다시재기

입니다.

3번기능은 1번이랑 비슷하고 다 비슷비슷할껍니다.
각 문장에서 변수가 의미하는거는
m : value_arr의 전체 배열의 개수를 계속해서 센다? 마지막에 출력할때 사용됨. 계속해서 값이 들어갈때는 m 값을 증가시킨다.
number : 위에서 우리가 입력해야할 숫자 예를들어) 1번기능에서는 number = 1250 2번에는 500원의 개수, 100원의 개수... 계속바뀜
len : 길이를 재기위한 수단 
size : 진짜 실제 number의 길이
a,b : 그냥 길이재는 변수 len이랑비슷
start, end, time : 출력할 시간을 위한 변수 신경 안쓰셔도 됩니다.

길이 재는 방법
1250이면 len에 저장시킨다음 10씩 나눠서 나머지를 arr 배열에 저장 또한 몫이 없을때까지 실행하여 size++로 길이를 잼


처음에 메이크하실때 오류뜰수도있는데 이거 읽어보고 변수값 안바꾸거나 그럴수 있어요.
실행에서 문제가 뜨면, 변수초기화나 while문 문제일수 있을거같아요.

실행할때 명령어
make
make install

라즈베리에서
mount -t nfs 10.0.0.100:/root/raspberry/nfs ./nfs
cd nfs
mknod /dev/key_driver c 211 0
mknod /dev/key_driver2 c 212 0
mknod /dev/key_driver3 c 213 0
mknod /dev/key_driver4 c 214 0
mknod /dev/dot_driver c 215 0
mknod /dev/sens_driver c 255 0                이거 이름 무조건 똑같이 적어야해요
mknod /dev/sens_driver2 c 217 0	 막.. sen_driver이러면 안되고 sens_driver로 해야하고
mknod /dev/sens_driver3 c 218 0	motor_driver에서 쉽게 mot_driver로 바꿨어요
mknod /dev/mot_driver c 219 0  
insmod key_driver.ko
insmod key_driver2.ko
insmod key_driver3.ko
insmod key_driver4.ko
insmod mot_driver.ko
insmod sens_driver.ko
insmod sens_driver2.ko
insmod sens_driver3.ko
insmod dot_driver.ko
한다음에 ./test_mac

만약에 test_mac코드만 수정하면 위 과정 할 필요 없습니다.
(driver코드 수정 안하면.. 이라는 말/ 근데 driver코드는 모터말고는 다 정상입니다.)
왠만해서는 test코드 문제일거예요

혹시 드라이버 코드 수정하면
rmmod /dev/ooo_driver 하시고
insmod ooo_driver.ko 두개만 하시면 될거예요

그럼 여기까지 였고... 혹시나 모르는건 연락주세요